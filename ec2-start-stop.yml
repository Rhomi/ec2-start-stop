# ============================= #
# !!! Do NOT edit this file !!! #
# ============================= #
# Instead edit ec2-start-stop.template.yml and run 'import-files.py' again
---

AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  Author: Michael Ludvig @ aws.nz
  Description: |-
    Demo of scheduled EC2 instance Stop/Start using
    Lambda function and CloudWatch Events scheduler

Parameters:
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet where to launch the EC2 instance

  ImageId:
    Type: String
    Description: AMI ID
    Default: ami-ff4ea59d   # https://aws.amazon.com/amazon-linux-ami/

  StartHourGMT:
    Description: GMT Timezone hour when the Instance will be started.
    Type: Number
    MaxValue: 23
    MinValue: 0
    Default: 17

  StopHourGMT:
    Description: GMT Timezone hour when the Instance will be stopped.
    Type: Number
    MaxValue: 23
    MinValue: 0
    Default: 6

Resources:
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  StartStopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: StartStopPolicy
        PolicyDocument:
          Statement:
          - Action:
            - ec2:StartInstances
            - ec2:StopInstances
            Effect: Allow
            Resource: '*'

  StartScheduler:
    Type: AWS::Events::Rule
    Properties:
      Description: Instance Start scheduler
      ScheduleExpression: !Sub "cron(0 ${StartHourGMT} ? * * *)"
      Targets:
      - Arn: !GetAtt StartStopLambda.Arn
        Id: StartStopLambda_Target
        Input: !Sub '{ "instance_id": "${Instance}", "action": "start" }'

  StartSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartStopLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartScheduler.Arn

  StopScheduler:
    Type: AWS::Events::Rule
    Properties:
      Description: Instance Stop scheduler
      ScheduleExpression: !Sub "cron(0 ${StopHourGMT} ? * * *)"
      Targets:
      - Arn: !GetAtt StartStopLambda.Arn
        Id: StartStopLambda_Target
        Input: !Sub '{ "instance_id": "${Instance}", "action": "stop" }'

  StopSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartStopLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopScheduler.Arn

  StartStopLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          instance_id: !Ref Instance
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt StartStopRole.Arn
      Runtime: python3.6
      Timeout: 10
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          -
            - "#!/usr/bin/env python3"
            - ""
            - "# Very simple EC2 Start/Stop lambda function."
            - "# Author: Michael Ludvig @ aws.nz"
            - "#"
            - "# Expects 'event' input in JSON format:"
            - "# {"
            - "#    \"instance_id\": \"i-1234567890abcdefgh\","
            - "#    \"action\": \"start\" (or \"stop\")"
            - "# }"
            - "#"
            - "# Best to call from AWS CloudWatch Events scheduler rule"
            - ""
            - "import boto3"
            - ""
            - "def lambda_handler(event, context):"
            - "    ec2 = boto3.client('ec2')"
            - "    try:"
            - "        instance_id = event['instance_id']"
            - "        action = event['action']"
            - "        assert(action in ['start', 'stop'])"
            - "    except:"
            - "        print('ERROR: Expecting JSON input: { \"instance_id\": \"${Instance}\", \"action\": \"start/stop\" }')"
            - "        raise"
            - "        return"
            - ""
            - "    if action == 'start':"
            - "        print(\"Starting instance %s\" % (instance_id))"
            - "        result = ec2.start_instances(InstanceIds = [instance_id])"
            - "        info = result['StartingInstances'][0]"
            - "    else:"
            - "        print(\"Stopping instance %s\" % (instance_id))"
            - "        result = ec2.stop_instances(InstanceIds = [instance_id])"
            - "        info = result['StoppingInstances'][0]"
            - ""
            - "    print(\"%s - %s -> %s\" % (info['InstanceId'], info['PreviousState']['Name'], info['CurrentState']['Name']))"
